// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  email        String    @unique
  username     String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?
  role         UserRole  @relation(fields: [roleId], references: [id])
  roleId       String

  Prompts UserPrompt[]
  APILogs APILog[]
  APIKeys APIKey[]
}

model UserRole {
  id    String @id @default(dbgenerated("gen_random_uuid()"))
  name  String @unique
  users User[]

  @@map("roles")
}

model UserPrompt {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  userId        String
  originalText  String
  refinedText   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  requestStatus String // Enum type or String holding values like "pending", "completed", "failed"

  user User @relation(fields: [userId], references: [id])

  @@map("user_prompts")
}

model APILog {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  userId       String?
  endpoint     String
  requestData  Json
  responseData Json?
  status       Int
  timestamp    DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("api_logs")
}

model APIKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  userId    String
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id])

  @@map("api_keys")
}

